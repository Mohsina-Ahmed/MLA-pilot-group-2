schema {
    query: Query
}

type Query{
    stats: StatsResult
    weeklyGoal(name: String): GoalResult
    caloriesGoal(name: String): CaloriesGoalResult
    homePage(name: String): HomePageResults
    dailyCalories(name: String, today_date: String): CaloriesResult
    filteredStats(name: String): StatsResult
    filteredActivityStats(name: String, activity: String): StatsFilteredResult
    weeklyStats(name: String, start_date: String, end_date: String): StatsResult
    exerciseStats(name: String, start_date: String, end_date: String): ExerciseResult
}

type StatsResult{
    success: Boolean!
    errors: [String]
    results: [Stats]
}

type StatsFilteredResult{
    success: Boolean!
    errors: [String]
    results: [ExerciseFiltered]
}

type ExerciseFiltered{
    longestDistance: Float
    longestDuration: Float
    fastestPace: Float
    totalDistance: Float
    totalDuration: Float
    totalActivities: Int
}

type Stats{
    username: String!
    exercises: [Exercise]
}

type Exercise{
    exerciseType: String
    exerciseDuration: Float
}

type ExerciseResult{
    success: Boolean!
    errors: [String]
    results: [ExerciseCount]
}

type ExerciseCount{
    username: String
    totalDuration: Float
    totalDistance: Float
    totalCount: Int
    exerciseCount: [DailyCount]
}

type DailyCount{
    date: String
    count: Int
    dailyDuration: Float
    dailyDistance: Float
}

type GoalResult{
    success: Boolean!
    errors: [String]
    results: [ExerciseGoal]
}


type ExerciseGoal{
  exercise: String
  goal: String
  unit: String
  value: Int
}

type CaloriesGoalResult{
    success: Boolean!
    errors: [String]
    results: [CaloriesGoal]
}

type CaloriesGoal{
  value: Int
}

type HomePageResults{
    success: Boolean!
    errors: [String]
    results: [LastExercise]
}

type LastExercise{
  exercise: String
  duration: Float
  date: String
}

type CaloriesResult{
    success: Boolean!
    errors: [String]
    results: [Calories]
}

type Calories{
  daily_calories: Float
}